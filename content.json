{"meta":{"title":"aisu's Blog","subtitle":"","description":"aisu会认真学习的","author":"aisu","url":"http://zwsmphmzl.github.io","root":"/"},"pages":[{"title":"about","date":"2022-09-07T13:56:35.000Z","updated":"2022-09-07T14:04:02.325Z","comments":true,"path":"about/index.html","permalink":"http://zwsmphmzl.github.io/about/index.html","excerpt":"","text":"目前是大二学生 开始入门WEB,MISC狗都不学"},{"title":"categories","date":"2022-09-05T09:51:43.000Z","updated":"2022-09-06T11:59:18.635Z","comments":false,"path":"categories/index.html","permalink":"http://zwsmphmzl.github.io/categories/index.html","excerpt":"","text":""},{"title":"comments","date":"2022-09-06T11:08:19.000Z","updated":"2022-09-06T14:55:18.862Z","comments":true,"path":"comments/index.html","permalink":"http://zwsmphmzl.github.io/comments/index.html","excerpt":"","text":""},{"title":"link","date":"2022-09-05T09:52:47.000Z","updated":"2022-09-06T11:59:18.640Z","comments":false,"path":"link/index.html","permalink":"http://zwsmphmzl.github.io/link/index.html","excerpt":"","text":""},{"title":"tags","date":"2022-09-05T09:46:49.000Z","updated":"2022-09-06T11:59:18.631Z","comments":false,"path":"tags/index.html","permalink":"http://zwsmphmzl.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"本地管理员","slug":"本地管理员（bugku）","date":"2022-09-06T16:00:00.000Z","updated":"2022-09-08T13:10:18.019Z","comments":true,"path":"posts/1959fd48.html","link":"","permalink":"http://zwsmphmzl.github.io/posts/1959fd48.html","excerpt":"","text":"题目是本地管理员，打开网址，f12看一下源码，发现有一行是base64编码，使用工具进行解码 出来是test123，猜测是密码，用户猜测为admin，输入进去结果不行 使用bp抓包试一下，然后再重新发送，提示ip禁止访问，因为题目是本地管理员 用xff伪装ip，然后发送 成功，返回flag 总结：xff伪装ip X-Forwarded-For: 写个博客都是bug，图片也不显示，不如本地，效率太低了，设置应该有问题（跪","categories":[{"name":"WEB","slug":"WEB","permalink":"http://zwsmphmzl.github.io/categories/WEB/"},{"name":"bugku","slug":"WEB/bugku","permalink":"http://zwsmphmzl.github.io/categories/WEB/bugku/"}],"tags":[{"name":"WEB","slug":"WEB","permalink":"http://zwsmphmzl.github.io/tags/WEB/"},{"name":"wp","slug":"wp","permalink":"http://zwsmphmzl.github.io/tags/wp/"}]},{"title":"RC4解密","slug":"RC4解密","date":"2022-09-06T13:17:00.000Z","updated":"2022-09-06T15:26:42.330Z","comments":true,"path":"posts/0.html","link":"","permalink":"http://zwsmphmzl.github.io/posts/0.html","excerpt":"","text":"12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152import base64def rc4_main(key = &quot;init_key&quot;, message = &quot;init_message&quot;): print(&quot;RC4解密主函数调用成功&quot;) print(&#x27;\\n&#x27;) s_box = rc4_init_sbox(key) crypt = rc4_excrypt(message, s_box) return cryptdef rc4_init_sbox(key): s_box = list(range(256)) print(&quot;原来的 s 盒：%s&quot; % s_box) print(&#x27;\\n&#x27;) j = 0 for i in range(256): j = (j + s_box[i] + ord(key[i % len(key)])) % 256 s_box[i], s_box[j] = s_box[j], s_box[i] print(&quot;混乱后的 s 盒：%s&quot;% s_box) print(&#x27;\\n&#x27;) return s_boxdef rc4_excrypt(plain, box): print(&quot;调用解密程序成功。&quot;) print(&#x27;\\n&#x27;) plain = base64.b64decode(plain.encode(&#x27;utf-8&#x27;)) plain = bytes.decode(plain) res = [] i = j = 0 for s in plain: i = (i + 1) % 256 j = (j + box[i]) % 256 box[i], box[j] = box[j], box[i] t = (box[i] + box[j]) % 256 k = box[t] res.append(chr(ord(s) ^ k)) print(&quot;res用于解密字符串，解密后是：%res&quot; %res) print(&#x27;\\n&#x27;) cipher = &quot;&quot;.join(res) print(&quot;解密后的字符串是：%s&quot; %cipher) print(&#x27;\\n&#x27;) print(&quot;解密后的输出(没经过任何编码):&quot;) print(&#x27;\\n&#x27;) return ciphera=[0xC6, 0x21, 0xCA, 0xBF, 0x51, 0x43, 0x37, 0x31, 0x75, 0xE4, 0x8E, 0xC0, 0x54, 0x6F, 0x8F, 0xEE, 0xF8, 0x5A, 0xA2, 0xC1, 0xEB, 0xA5, 0x34, 0x6D, 0x71, 0x55, 0x08, 0x07, 0xB2, 0xA8, 0x2F, 0xF4, 0x51, 0x8E, 0x0C, 0xCC, 0x33, 0x53, 0x31, 0x00, 0x40, 0xD6, 0xCA, 0xEC, 0xD4] #cipher#这里16进制，r转换key=&quot;Nu1Lctf233&quot;#这里s=&quot;&quot;for i in a: s+=chr(i)s=str(base64.b64encode(s.encode(&#x27;utf-8&#x27;)), &#x27;utf-8&#x27;)rc4_main(key, s)","categories":[{"name":"CRYPTO","slug":"CRYPTO","permalink":"http://zwsmphmzl.github.io/categories/CRYPTO/"},{"name":"脚本爆破","slug":"CRYPTO/脚本爆破","permalink":"http://zwsmphmzl.github.io/categories/CRYPTO/%E8%84%9A%E6%9C%AC%E7%88%86%E7%A0%B4/"}],"tags":[{"name":"CRYPTO","slug":"CRYPTO","permalink":"http://zwsmphmzl.github.io/tags/CRYPTO/"},{"name":"py脚本","slug":"py脚本","permalink":"http://zwsmphmzl.github.io/tags/py%E8%84%9A%E6%9C%AC/"}]},{"title":"SHA256解密","slug":"SHA256解密","date":"2022-09-06T13:12:00.000Z","updated":"2022-09-06T15:26:42.335Z","comments":true,"path":"posts/ce390778.html","link":"","permalink":"http://zwsmphmzl.github.io/posts/ce390778.html","excerpt":"","text":"py代码1234567891011121314151617181920import hashlibwhile True: for data in range(8617090000000,8617099999999): data=str(data) hash=((hashlib.sha256(data.encode())).hexdigest()) R=&#x27;c22a563acc2a587afbfaaaa6d67bc6e628872b00bd7e998873881f7c6fdc62fc&#x27; i = 0 j = 0 while(i&lt;64): if(hash[i]==R[j]): i=i+1 j=j+1 if(i==64): print(data) else: break","categories":[{"name":"CRYPTO","slug":"CRYPTO","permalink":"http://zwsmphmzl.github.io/categories/CRYPTO/"},{"name":"脚本爆破","slug":"CRYPTO/脚本爆破","permalink":"http://zwsmphmzl.github.io/categories/CRYPTO/%E8%84%9A%E6%9C%AC%E7%88%86%E7%A0%B4/"}],"tags":[{"name":"CRYPTO","slug":"CRYPTO","permalink":"http://zwsmphmzl.github.io/tags/CRYPTO/"},{"name":"py脚本","slug":"py脚本","permalink":"http://zwsmphmzl.github.io/tags/py%E8%84%9A%E6%9C%AC/"}]},{"title":"RSA脚本爆破","slug":"RSA脚本爆破","date":"2022-09-06T12:18:00.000Z","updated":"2022-09-06T14:45:19.462Z","comments":true,"path":"posts/0.html","link":"","permalink":"http://zwsmphmzl.github.io/posts/0.html","excerpt":"","text":"12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091#RSA加密#RSA加密是对消息进行模求幂，其指数为e，# 模为N，通常是两个素数的乘积:N = p * q。指数和模一起形成RSA“公钥”(N, e)。# e最常用的值是0x10001或65537。# 使用指数e = 65537和素数p = 17和q = 23来“加密”数字12。你得到的密文是什么数字?e=65537#指数p=17q=23N=p*q#模m=12#需加密信息print(pow(m,e,N)) #c密文=pow(明文，指数，模)#求欧拉函数phin&#x27;&#x27;&#x27;RSA依赖于模数N的分解难度，如果能找到质数，就可以计算出N的欧拉系数，从而对密文进行解密。给定N = p*q和两个素数:p = 857504083339712752489993810777q = 1029224947942998075080348647219N的欧拉函数是多少?&#x27;&#x27;&#x27;p = 857504083339712752489993810777q = 1029224947942998075080348647219phin=(p-1)*(q-1) #(分解n的因数)#求私匙&#x27;&#x27;&#x27;私钥d用于解密用相应的公钥创建的密文(它还用于“签名”消息，但我们稍后将讨论这个问题)。私钥是一种秘密信息或“活板门”，它可以让我们快速地转换加密功能。如果RSA实现得很好，如果你没有私钥最快的解密密文的方法是首先分解模数。在RSA中，私钥是指数e的模乘以N的权数的模乘逆。给定两个质数:p = 857504083339712752489993810777q = 1029224947942998075080348647219指数:e = 65537什么是私钥d?&#x27;&#x27;&#x27;p = 857504083339712752489993810777q = 1029224947942998075080348647219e = 65537N=p*q #指数e的模phin=(p-1)*(q-1)d=pow(e,-1,phin) #d私匙=pow(指数，-1，欧拉函数)print(d)#RSA解密&#x27;&#x27;&#x27;我只使用你的公钥参数为你的眼睛加密了一个秘密数字:N = 882564595536224140639625987659416029426239230804614613279163e = 65537使用您在前面的挑战中找到的这些参数的私钥来解密这个密文:c = 77578995801157823671636298847186723593814843845525223303932m≡ c^d mod N&#x27;&#x27;&#x27;N = 882564595536224140639625987659416029426239230804614613279163e = 65537ct = 77578995801157823671636298847186723593814843845525223303932#n是合数利用yafu分解Np=857504083339712752489993810777q=1029224947942998075080348647219phin=(p-1)*(q-1)d=pow(e,-1,phin) #d私匙=pow(指数，-1，欧拉函数)m=pow(ct,d,N) #m明文=(密文，密匙，模)print(m)#n是素数解密phin=(n-1)#eg：from Crypto.Util.number import getPrime, inverse, bytes_to_long, long_to_bytes, GCDn = 171731371218065444125482536302245915415603318380280392385291836472299752747934607246477508507827284075763910264995326010251268493630501989810855418416643352631102434317900028697993224868629935657273062472544675693365930943308086634291936846505861203914449338007760990051788980485462592823446469606824421932591e = 65537ct = 161367550346730604451454756189028938964941280347662098798775466019463375610700074840105776873791605070092554650190486030367121011578171525759600774739890458414593857709994072516290998135846956596662071379067305011746842247628316996977338024343628757374524136260758515864509435302781735938531030576289086798942phin=n-1d=pow(e,-1,phin)m=pow(ct,d,n)print(long_to_bytes(m))#n=p^2#eg:from Crypto.Util.number import getPrime, inverse, bytes_to_long, long_to_bytes, GCDfrom gmpy2 import irootn = 535860808044009550029177135708168016201451343147313565371014459027743491739422885443084705720731409713775527993719682583669164873806842043288439828071789970694759080842162253955259590552283047728782812946845160334801782088068154453021936721710269050985805054692096738777321796153384024897615594493453068138341203673749514094546000253631902991617197847584519694152122765406982133526594928685232381934742152195861380221224370858128736975959176861651044370378539093990198336298572944512738570839396588590096813217791191895941380464803377602779240663133834952329316862399581950590588006371221334128215409197603236942597674756728212232134056562716399155080108881105952768189193728827484667349378091100068224404684701674782399200373192433062767622841264055426035349769018117299620554803902490432339600566432246795818167460916180647394169157647245603555692735630862148715428791242764799469896924753470539857080767170052783918273180304835318388177089674231640910337743789750979216202573226794240332797892868276309400253925932223895530714169648116569013581643192341931800785254715083294526325980247219218364118877864892068185905587410977152737936310734712276956663192182487672474651103240004173381041237906849437490609652395748868434296753449e = 65537c = 222502885974182429500948389840563415291534726891354573907329512556439632810921927905220486727807436668035929302442754225952786602492250448020341217733646472982286222338860566076161977786095675944552232391481278782019346283900959677167026636830252067048759720251671811058647569724495547940966885025629807079171218371644528053562232396674283745310132242492367274184667845174514466834132589971388067076980563188513333661165819462428837210575342101036356974189393390097403614434491507672459254969638032776897417674577487775755539964915035731988499983726435005007850876000232292458554577437739427313453671492956668188219600633325930981748162455965093222648173134777571527681591366164711307355510889316052064146089646772869610726671696699221157985834325663661400034831442431209123478778078255846830522226390964119818784903330200488705212765569163495571851459355520398928214206285080883954881888668509262455490889283862560453598662919522224935145694435885396500780651530829377030371611921181207362217397805303962112100190783763061909945889717878397740711340114311597934724670601992737526668932871436226135393872881664511222789565256059138002651403875484920711316522536260604255269532161594824301047729082877262812899724246757871448545439896p=iroot(n,2)[0] #开根print(p)# n=p^a*q^b*r^c =&gt; phin=p^&#123;a-1&#125;*(p-1)*q^&#123;b-1&#125;*(q-1)phin=p*(p-1) #根据欧拉公式d=pow(e,-1,phin)m=pow(c,d,n)print(long_to_bytes(m)) 根据需求修改脚本","categories":[{"name":"CRYPTO","slug":"CRYPTO","permalink":"http://zwsmphmzl.github.io/categories/CRYPTO/"},{"name":"脚本爆破","slug":"CRYPTO/脚本爆破","permalink":"http://zwsmphmzl.github.io/categories/CRYPTO/%E8%84%9A%E6%9C%AC%E7%88%86%E7%A0%B4/"}],"tags":[{"name":"CRYPTO","slug":"CRYPTO","permalink":"http://zwsmphmzl.github.io/tags/CRYPTO/"},{"name":"py脚本","slug":"py脚本","permalink":"http://zwsmphmzl.github.io/tags/py%E8%84%9A%E6%9C%AC/"}]},{"title":"棋盘爆破","slug":"棋盘爆破","date":"2022-09-05T16:00:00.000Z","updated":"2022-09-06T15:26:42.333Z","comments":true,"path":"posts/0.html","link":"","permalink":"http://zwsmphmzl.github.io/posts/0.html","excerpt":"","text":"1234567891011121314151617181920import itertoolskey = []cipher = &quot;ilnllliiikkninlekile&quot;for i in itertools.permutations(&#x27;ilnke&#x27;, 5): key.append(&#x27;&#x27;.join(i))for now_key in key: solve_c = &quot;&quot; res = &quot;&quot; for now_c in cipher: solve_c += str(now_key.index(now_c)) for i in range(0,len(solve_c),2): now_ascii = int(solve_c[i])*5+int(solve_c[i+1])+97 if now_ascii&gt;ord(&#x27;i&#x27;): now_ascii+=1 res += chr(now_ascii) if &quot;flag&quot; in res: print (now_key,res)","categories":[{"name":"CRYPTO","slug":"CRYPTO","permalink":"http://zwsmphmzl.github.io/categories/CRYPTO/"},{"name":"脚本爆破","slug":"CRYPTO/脚本爆破","permalink":"http://zwsmphmzl.github.io/categories/CRYPTO/%E8%84%9A%E6%9C%AC%E7%88%86%E7%A0%B4/"}],"tags":[{"name":"CRYPTO","slug":"CRYPTO","permalink":"http://zwsmphmzl.github.io/tags/CRYPTO/"},{"name":"py脚本","slug":"py脚本","permalink":"http://zwsmphmzl.github.io/tags/py%E8%84%9A%E6%9C%AC/"}]},{"title":"Hello Debu","slug":"hello-world","date":"2022-09-05T08:49:38.904Z","updated":"2022-09-06T15:26:42.327Z","comments":true,"path":"posts/59354.html","link":"","permalink":"http://zwsmphmzl.github.io/posts/59354.html","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"WEB","slug":"WEB","permalink":"http://zwsmphmzl.github.io/categories/WEB/"},{"name":"bugku","slug":"WEB/bugku","permalink":"http://zwsmphmzl.github.io/categories/WEB/bugku/"},{"name":"CRYPTO","slug":"CRYPTO","permalink":"http://zwsmphmzl.github.io/categories/CRYPTO/"},{"name":"脚本爆破","slug":"CRYPTO/脚本爆破","permalink":"http://zwsmphmzl.github.io/categories/CRYPTO/%E8%84%9A%E6%9C%AC%E7%88%86%E7%A0%B4/"}],"tags":[{"name":"WEB","slug":"WEB","permalink":"http://zwsmphmzl.github.io/tags/WEB/"},{"name":"wp","slug":"wp","permalink":"http://zwsmphmzl.github.io/tags/wp/"},{"name":"CRYPTO","slug":"CRYPTO","permalink":"http://zwsmphmzl.github.io/tags/CRYPTO/"},{"name":"py脚本","slug":"py脚本","permalink":"http://zwsmphmzl.github.io/tags/py%E8%84%9A%E6%9C%AC/"}]}